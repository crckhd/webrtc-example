import Firebase from "./firebase";

export default class Signal {

	// ICE-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
	private static _servers: RTCConfiguration = {
		iceServers: [
			{
				urls: ['stun:stun1.l.google.com:19302', 'stun:stun2.l.google.com:19302'],
			},
		],
		iceCandidatePoolSize: 10,
	};

	protected static _localStream: MediaStream;
	protected static _remoteStream = new MediaStream();
	protected static _peerConnection: RTCPeerConnection;

	static init(): void {

		// –ò–Ω–∏—Ü–∏–ª–∏–∞–∑–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
		Signal._peerConnection = new RTCPeerConnection(Signal._servers);

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
		Signal.actions.setup();

		// –°–æ–∑–¥–∞–µ–º –æ—Ñ—Ñ–µ—Ä
		Signal.actions.createOffer(Signal._peerConnection);
	}

	static events = class {

		/**
		 * –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–∞ —Ç–µ–∫—É—â–µ–º—É RTC-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—é
		 */
		static onReceiveLocalStream(): void {
			Signal._localStream.getTracks().forEach(track => {
				Signal._peerConnection.addTrack(track);
			});
		}

		/**
		 * –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–∞ —Ç–µ–∫—É—â–µ–º—É remoteStream
		 * @param e - –∏–≤–µ–Ω—Ç —Å —Ç—Ä–µ–∫–æ–º
		 */
		static onReceiveRemoteStream(e: RTCTrackEvent): void {
			e.streams[0].getTracks().forEach(track => {
				Signal._remoteStream.addTrack(track);
			})
		}
	}

	static actions = class {

		static async setup(): Promise<void> {

			// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø–æ—Ç–æ–∫–æ–≤—ã–º –¥–∞–Ω–Ω—ã–º –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ –∏–∑ –Ω–∞—à–µ–π –≤–µ–±–∫–∏ –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ —Å –ø–æ–º–æ—â—å—é API –±—Ä–∞—É–∑–µ—Ä–∞
			const localStream = navigator.mediaDevices.getUserMedia({ video: true, audio: true });

			// –ï—Å–ª–∏ –ø–æ—Ç–æ–∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –ø–æ–ª—É—á–µ–Ω
			await localStream
			.then(stream => {

				// –î–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∫—ç—à
				Signal._localStream = stream;

				// –í—ã–∑—ã–≤–∞–µ–º –∏–≤–µ–Ω—Ç –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–∞ –∫ RTC-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—é
				Signal.events.onReceiveLocalStream();
			})
			.catch(() => {

				// –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
				alert('–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –Ω—É–∂–Ω–æ –¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µüòº\n–°–µ–π—á–∞—Å –ø–æ–ø—Ä–æ–±—É—é –µ—â—ë —Ä–∞–∑ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ');

				// –ü—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑
				Signal.actions.setup();
			});

			// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≤–µ–Ω—Ç –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ
			Signal._peerConnection.ontrack = Signal.events.onReceiveRemoteStream;
		}

		/**
		 * –ú–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–µ—Ç –æ—Ñ—Ñ–µ—Ä
		 */
		static async createOffer(peerConnection: RTCPeerConnection): Promise<void> {

			// –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ Firestore
			Firebase.events.onSetupOffer();

			// ID –Ω–∞—à–µ–≥–æ –∑–≤–æ–Ω–∫–∞ –±—É–¥–µ—Ç —Ç–∞–∫–æ–π –∂–µ, –∫–∞–∫–æ–π –∏ ID —É –Ω–∞—à–µ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—Ü–∞ –≤ Firestore
			const offerId = Firebase.info.getId();

			// –î–æ–±–∞–≤–ª—è–µ–º ICE-–∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –≤ –Ω–∞—à–µ RTC-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
			peerConnection.onicecandidate = (event: RTCPeerConnectionIceEvent) => {
				event.candidate && Firebase.events.onReceiveIceCandidate(event.candidate);
			}

			// –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –æ—Ñ—Ñ–µ—Ä–∞ (–≤–∫–ª—é—á–µ–Ω–æ –ª–∏ –∞—É–¥–∏–æ, –≤–∏–¥–µ–æ, –∫–æ–¥–µ–∫ –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ)
			const offerDescription = await peerConnection.createOffer();

			// –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –æ—Ñ—Ñ–µ—Ä–∞ –∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—é
			await peerConnection.setLocalDescription(offerDescription);

			const offer: RTCSessionDescriptionInit = {
				sdp: offerDescription.sdp,
				type: offerDescription.type
			}

			// –ü–µ—Ä–µ–¥–∞–µ–º –æ—Ñ—Ñ–µ—Ä —Å–µ—Ä–≤–µ—Ä—É –∏ —Å–ª—É—à–∞–µ–º –∫–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç
			await Firebase.events.onCreateOffer(offer);
		}

		static async createAnswer(peerConnection: RTCPeerConnection): void {

		}
	}
}
